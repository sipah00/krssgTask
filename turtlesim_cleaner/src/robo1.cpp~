#include <bits/stdc++.h>
#include "ros/ros.h"
#include "geometry_msgs/Twist.h"
#include "turtlesim/Pose.h"
#include <sstream>
#include <turtlesim/TeleportAbsolute.h>
#include <turtlesim/Spawn.h>

using namespace std;

#define TOTAL_POINTS 10


struct co_ordinates {
	int x;
	int y;
};


int decode(int x, int y){		
	static int seq_count=0, redo=0;
	int rand_x, rand_y, count = 0;
	static vector<co_ordinates> vec;
	co_ordinates temp;

	if(!redo){
		while (count != TOTAL_POINTS){
			while(1){
				int flag=0;
				rand_x = rand()%10;
				rand_y = rand()%10;
				if((rand_x == 0 || rand_x == 9) && (rand_y == 0 || rand_y == 9))
					continue;
				else{
					for(int i=0;i<vec.size(); ++i){
						if(((rand_x == vec[i].x   ) && (rand_y == vec[i].y   )) ||
						   ((rand_x == vec[i].x -1) && (rand_y == vec[i].y   )) ||
						   ((rand_x == vec[i].x +1) && (rand_y == vec[i].y   )) ||
						   ((rand_x == vec[i].x   ) && (rand_y == vec[i].y -1)) ||
						   ((rand_x == vec[i].x   ) && (rand_y == vec[i].y +1)) ||
						   ((rand_x == vec[i].x -1) && (rand_y == vec[i].y -1)) ||
						   ((rand_x == vec[i].x +1) && (rand_y == vec[i].y +1)) ||
						   ((rand_x == vec[i].x -1) && (rand_y == vec[i].y +1)) ||
						   ((rand_x == vec[i].x +1) && (rand_y == vec[i].y -1))){
							flag=1;
							break;
						}
					}
					if(!flag){
						temp.x = rand_x;
						temp.y = rand_y;
						vec.push_back(temp);
						break;
					}
					else{
						continue;
					}
				}
			} 
			++count;
		} 
		++redo;
	}

	for(int i=0;i<vec.size();++i){
		if(vec[i].x==x && vec[i].y==y){
			if(i==seq_count){
				++seq_count;
				return 2;
			}
			else
				return 1;
		}
	}
	return 0;
}

int main(int argc, char **argv){


    ros::init(argc, argv, "robo1");
    ros::NodeHandle n1;



    ros::ServiceClient Clientn1=n1.serviceClient<turtlesim::Spawn>("spawn");
    turtlesim::Spawn::Request reqn1;
    turtlesim::Spawn::Response respn1;
    reqn1.x=0;
    reqn1.y=10;
    reqn1.theta=0;
    reqn1.name="krssg";
    successs=Clientn1.call(reqn1,respn1);



    ros::ServiceClient teleport_absoluteClient=n1.serviceClient<turtlesim::TeleportAbsolute>("krssg/teleport_absolute");
    turtlesim::TeleportAbsolute::Request req;
    turtlesim::TeleportAbsolute::Response resp;
    
    int c=0,t;
    bool s,istrue=true;
    vector< pair <int,int> > vec;


    for(int i=1,j=9;i<5&&j<10&&i>0&&j>5;i++,j--){
        if(i%2!=0){
        	for(int k=10;k>=j;k--){
        		t=decode(i,k)
        		if(t==0){
        			req.x=i;
        			req.y=k;
                    s=teleport_absoluteClient.call(req,resp);
        		}else if(t==1){
        			vec.push_back(make_pair(i,k));
        			for(int m=-1;m<=1;m++)
        				if(istrue)
        					for(int n=-1;n<=1;n++)
        		if(i+m>0&&k+n>0&&i+m<11&&k+n<11&&(m!=0||n!=0)){
                   req.x=i+m;
                   req.y=k+n;
                   s=teleport_absoluteClient.call(req,resp);
                   istrue=false;
                   break;
        		}
        	}else if(t==2){
             c++;
             if(c>10) return 0;
             cout<<"block no."<<c<<i<<","<<k<<endl;
             istrue=true;
             for(int m=-1;m<=1;m++)
        				if(istrue)
        					for(int n=-1;n<=1;n++)
        		if(i+m>0&&k+n>0&&i+m<11&&k+n<11&&(m!=0||n!=0)){
                   req.x=i+m;
                   req.y=k+n;
                   s=teleport_absoluteClient.call(req,resp);
                   istrue=false;
                   break;
        		}
        }
               

   }
   for(int l=i-1;i>=0;l--){
   	t=decode(l,j)
        		if(t==0){
        			req.x=l;
        			req.y=j;
                    s=teleport_absoluteClient.call(req,resp);
        		}else if(t==1){
        			vec.push_back(make_pair(l,j));
        			for(int m=-1;m<=1;m++)
        				if(istrue)
        					for(int n=-1;n<=1;n++)
        		if(l+m>0&&j+n>0&&l+m<11&&j+n<11&&(m!=0||n!=0)){
                   req.x=l+m;
                   req.y=j+n;
                   s=teleport_absoluteClient.call(req,resp);
                   istrue=false;
                   break;
        		}
        	}else if(t==2){
             c++;
             if(c>10) return 0;
             cout<<"block no."<<c<<l<<","<<j<<endl;
             istrue=true;
             for(int m=-1;m<=1;m++)
        				if(istrue)
        					for(int n=-1;n<=1;n++)
        		if(l+m>0&&j+n>0&&l+m<11&&j+n<11&&(m!=0||n!=0)){
                   req.x=l+m;
                   req.y=j+n;
                   s=teleport_absoluteClient.call(req,resp);
                   istrue=false;
                   break;
        		}
        }
           
   }
    
    }else{
    for(int k=0;k<=i;k++){
        		t=decode(i,k)
        		if(t==0){
        			req.x=i;
        			req.y=k;
                    s=teleport_absoluteClient.call(req,resp);
        		}else if(t==1){
        			vec.push_back(make_pair(i,k));
        			for(int m=-1;m<=1;m++)
        				if(istrue)
        					for(int n=-1;n<=1;n++)
        		if(i+m>0&&k+n>0&&i+m<11&&k+n<11&&(m!=0||n!=0)){
                   req.x=i+m;
                   req.y=k+n;
                   s=teleport_absoluteClient.call(req,resp);
                   istrue=false;
                   break;
        		}
        	}else if(t==2){
             c++;
             if(c>10) return 0;
             cout<<"block no."<<c<<i<<","<<k<<endl;
             istrue=true;
             for(int m=-1;m<=1;m++)
        				if(istrue)
        					for(int n=-1;n<=1;n++)
        		if(i+m>0&&k+n>0&&i+m<11&&k+n<11&&(m!=0||n!=0)){
                   req.x=i+m;
                   req.y=k+n;
                   s=teleport_absoluteClient.call(req,resp);
                   istrue=false;
                   break;
        		}
        }
               

   }

   for(int h=j+1;h<=10;h++){
   	t=decode(i,h)
        		if(t==0){
        			req.x=i;
        			req.y=h;
                    s=teleport_absoluteClient.call(req,resp);
        		}else if(t==1){
        			vec.push_back(make_pair(i,h));
        			for(int m=-1;m<=1;m++)
        				if(istrue)
        					for(int n=-1;n<=1;n++)
        		if(i+m>0&&h+n>0&&i+m<11&&h+n<11&&(m!=0||n!=0)){
                   req.x=i+m;
                   req.y=h+n;
                   s=teleport_absoluteClient.call(req,resp);
                   istrue=false;
                   break;
        		}
        	}else if(t==2){
             c++;
             if(c>10) return 0;
             cout<<"block no."<<c<<i<<","<<k<<endl;
             istrue=true;
             for(int m=-1;m<=1;m++)
        				if(istrue)
        					for(int n=-1;n<=1;n++)
        		if(i+m>0&&h+n>0&&i+m<11&&h+n<11&&(m!=0||n!=0)){
                   req.x=i+m;
                   req.y=h+n;
                   s=teleport_absoluteClient.call(req,resp);
                   istrue=false;
                   break;
        		}
        }
  
  }   

}

return 0;

}
